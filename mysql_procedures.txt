CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `clean_lost_links`()
BEGIN
	# From players to roster
	SELECT * FROM roster WHERE player_id NOT IN (SELECT id FROM players);
	DELETE FROM roster WHERE player_id NOT IN (SELECT id FROM players);

	# From roster to mods then mod_stats
	SELECT * FROM mods WHERE roster_id NOT IN (SELECT id FROM roster);
	DELETE FROM mods WHERE roster_id NOT IN (SELECT id FROM roster);
	SELECT * FROM mod_stats WHERE mod_id NOT IN (SELECT id FROM mods);
	DELETE FROM mod_stats WHERE mod_id NOT IN (SELECT id FROM mods);

	# From roster to roster_eqpt, roster_skills, roster_stats
	SELECT * FROM roster_eqpt WHERE roster_id NOT IN (SELECT id FROM roster);
	DELETE FROM roster_eqpt WHERE roster_id NOT IN (SELECT id FROM roster);
	SELECT * FROM roster_skills WHERE roster_id NOT IN (SELECT id FROM roster);
	DELETE FROM roster_skills WHERE roster_id NOT IN (SELECT id FROM roster);
	SELECT * FROM roster_stats WHERE roster_id NOT IN (SELECT id FROM roster);
	DELETE FROM roster_stats WHERE roster_id NOT IN (SELECT id FROM roster);

	# From equipment to eqpt_stats and eqpt_missionList
	SELECT * FROM eqpt_stats WHERE equipment_id NOT IN (SELECT id FROM equipment);
	DELETE FROM eqpt_stats WHERE equipment_id NOT IN (SELECT id FROM equipment);
	SELECT * FROM eqpt_missionList WHERE equipment_id NOT IN (SELECT id FROM equipment);
	DELETE FROM eqpt_missionList WHERE equipment_id NOT IN (SELECT id FROM equipment);

	# From units to unit_tiers then unit_stats
	SELECT * FROM unit_tiers WHERE unit_id NOT IN (SELECT id FROM units);
	DELETE FROM unit_tiers WHERE unit_id NOT IN (SELECT id FROM units);
	SELECT * FROM unit_stats WHERE unit_tier_id NOT IN (SELECT id FROM unit_tiers);
	DELETE FROM unit_stats WHERE unit_tier_id NOT IN (SELECT id FROM unit_tiers);

END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `get_db_size`()
BEGIN
	SELECT table_schema AS "Database", 
	ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS "Size (MB)" 
	FROM information_schema.TABLES 
	GROUP BY table_schema;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `get_guild_gp`(
	IN delta_days INT)
BEGIN
	SELECT SUM(char_gp)+SUM(ship_gp) AS total_gp, SUM(char_gp) AS char_gp, SUM(ship_gp) AS ship_gp FROM (
		SELECT players.name, MAX(gp_history.char_gp) AS char_gp, MAX(gp_history.ship_gp) AS ship_gp
        FROM players
        LEFT JOIN gp_history
        ON gp_history.player_id = players.id
        WHERE TIMESTAMPDIFF(SECOND,date, CURRENT_TIMESTAMP) >= delta_days*24*3600 AND TIMESTAMPDIFF(SECOND,date, CURRENT_TIMESTAMP) <= (delta_days+2)*24*3600
        GROUP BY players.id
	) AS T;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `get_unit_stat`(
	IN p_allyCode INT,
    IN p_stat_name VARCHAR(255),
    IN p_sort_by_stat BOOL
    )
BEGIN
    SET @p_stat_id = 0;
    SET @p_mod_set = 0;
    SET @p_mod_count_min = 0;
	SELECT stat_id, mod_set, mod_count_min
    INTO @p_stat_id, @p_mod_set, @p_mod_count_min
    FROM statistics WHERE name_en = p_stat_name OR name_fr = p_stat_name;

	DROP VIEW IF EXISTS base_stat_view;
	CREATE VIEW base_stat_view AS(
	SELECT roster.id AS roster_id, roster.defId AS char_name,
	unit_stats.unitStatId as base_statId,
    unit_stats.statValueDecimal AS base_statValue
	FROM roster
	JOIN units ON units.baseId = roster.defId
	JOIN unit_tiers ON unit_tiers.unit_id = units.id AND unit_tiers.tier = roster.gear
	JOIN unit_stats ON unit_stats.unit_tier_id = unit_tiers.id
	);

	DROP VIEW IF EXISTS eqpt_stat_view;
	CREATE VIEW eqpt_stat_view AS(
	SELECT roster.id AS roster_id, roster.defId AS char_name,
    eqpt_stats.unitStatId AS eqpt_statId,
	sum(eqpt_stats.statValueDecimal) AS eqpt_statValue
	FROM roster
	JOIN roster_eqpt ON roster.id = roster_eqpt.roster_id
	JOIN equipment ON roster_eqpt.equipment_id = equipment.equipment_id
	JOIN eqpt_stats ON equipment.id = eqpt_stats.equipment_id
	GROUP BY roster.id, roster.defId, eqpt_stats.unitStatId
	);

	DROP VIEW IF EXISTS mod_stat_view;
	CREATE VIEW mod_stat_view AS(
	SELECT roster.id AS roster_id, roster.defId AS char_name,
	mod_stats.unitStat AS mod_statId,
	sum(mod_stats.value) AS mod_statValue
	FROM roster
	JOIN mods ON roster.id = mods.roster_id
	JOIN mod_stats ON mods.id = mod_stats.mod_id
	GROUP BY roster.id, roster.defId, mod_stats.unitStat
	);

	DROP VIEW IF EXISTS mod_modifier_view;
	CREATE VIEW mod_modifier_view AS(
	SELECT roster.id AS roster_id, roster.defId AS char_name,
	mods.mod_set,
    count(mods.mod_set) AS mod_count,
	sum(mods.level = 15) as lvl15_count
	FROM roster
	JOIN mods ON roster.id = mods.roster_id
	GROUP BY roster.id, roster.defId, mods.mod_set
	);

	SELECT units.nameKey AS Perso,
	base_statValue, eqpt_statValue, mod_statValue, mod_count, lvl15_count,
    CASE WHEN @p_mod_set = 0 THEN
		base_statValue/10000 +IFNULL(eqpt_statValue, 0)/10000+IFNULL(mod_statValue, 0)
	ELSE # @p_mod_set != 0
		CASE WHEN @p_mod_count_min = 4 THEN
			CASE WHEN IFNULL(mod_count, 0) < 4 THEN
				base_statValue/10000 +IFNULL(eqpt_statValue, 0)/10000+IFNULL(mod_statValue, 0)
			ELSE
				CASE WHEN IFNULL(lvl15_count, 0) < 4 THEN
					FLOOR(base_statValue/10000*1.05 +IFNULL(eqpt_statValue, 0)/10000+IFNULL(mod_statValue, 0))
				ELSE
					FLOOR(base_statValue/10000*1.1 +IFNULL(eqpt_statValue, 0)/10000+IFNULL(mod_statValue, 0))
				END
			END
		END
	END AS stat_value
	FROM roster
	LEFT JOIN base_stat_view ON base_stat_view.roster_id = roster.id AND base_stat_view.base_statId = @p_stat_id
	LEFT JOIN eqpt_stat_view ON eqpt_stat_view.roster_id = roster.id AND eqpt_stat_view.eqpt_statId = @p_stat_id
	LEFT JOIN mod_stat_view ON mod_stat_view.roster_id = roster.id AND mod_stat_view.mod_statId = @p_stat_id
	LEFT JOIN mod_modifier_view ON mod_modifier_view.roster_id = roster.id AND mod_modifier_view.mod_set = @p_mod_set
    JOIN units ON units.unit_id = base_stat_view.char_name
    JOIN players ON players.id = roster.player_id
	WHERE players.allyCode = p_allyCode
    ORDER BY
		CASE WHEN p_sort_by_stat THEN stat_value END DESC,
		CASE WHEN NOT p_sort_by_stat THEN units.nameKey END ASC;

END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_guild_subteams`(
    IN p_team_id INT,
    IN subteams_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_guild_subteams');
	#INSERT INTO debug(txt) VALUES(CONCAT('team_id=', p_team_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('subteams_txt=', subteams_txt));

	# DELETE subteams and associated roster before creating it again
    DELETE FROM guild_team_roster_zetas WHERE roster_id IN (
		SELECT guild_team_roster.id FROM guild_team_roster
        JOIN guild_subteams ON guild_subteams.id = guild_team_roster.subteam_id
        WHERE guild_subteams.team_id = p_team_id
	);
    DELETE FROM guild_team_roster WHERE subteam_id IN (
		SELECT id FROM guild_subteams WHERE team_id = p_team_id
	);
    DELETE FROM guild_subteams WHERE team_id = p_team_id;

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(subteams_txt)) = 0 OR subteams_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_subteam = SUBSTRING_INDEX(subteams_txt,'/',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_guild_subteams @next_subteam=', @next_subteam));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_subteam_len = CHAR_LENGTH(@next_subteam);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @subteam_name = SUBSTRING_INDEX(@next_subteam,';',1);
		SET @subteam_minimum = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_subteam,'|',1),';',-1);
        
		SET @before_toons_txt = SUBSTRING_INDEX(@next_subteam,'|',1);
		SET @pos_toons_txt = CHAR_LENGTH(@before_toons_txt);
		SET @toons_txt = INSERT(@next_subteam,1,@pos_toons_txt + 1,'');

        -- insert the extracted value into the target table
		INSERT INTO guild_subteams(team_id) VALUES(p_team_id);
        SET @subteam_id = LAST_INSERT_ID();
        UPDATE guild_subteams SET
			name = @subteam_name,
            minimum = @subteam_minimum
		WHERE id = @subteam_id;

		CALL update_guild_subteam_toons(@subteam_id, @toons_txt);
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET subteams_txt = INSERT(subteams_txt,1,@next_subteam_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_guild_subteam_toons`(
    IN p_subteam_id INT,
    IN toons_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_guild_subteam_toons');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_subteam_id=', p_subteam_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('toons_txt=', toons_txt));

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(toons_txt)) = 0 OR toons_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_toon = SUBSTRING_INDEX(toons_txt,'|',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_subteam_toons @next_toon=', @next_toon));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_toon_len = CHAR_LENGTH(@next_toon);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @toon_id = SUBSTRING_INDEX(@next_toon,';',1);
		SET @toon_rarity_min = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',2),';',-1);
		SET @toon_gear_min = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',3),';',-1);
		SET @toon_rarity_reco = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',4),';',-1);
		SET @toon_gear_reco = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',5),';',-1);
		SET @toon_speed = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',6),';',-1);
		SET @toon_capaLevel = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',7),';',-1);
		SET @toon_modLevel = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',8),';',-1);
		SET @toon_pg_min = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',9),';',-1);
		SET @toon_zetas = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_toon,';',10),';',-1);
        
        -- insert the extracted value into the target table
		INSERT INTO guild_team_roster(subteam_id) VALUES(p_subteam_id);
        SET @roster_id = LAST_INSERT_ID();
        UPDATE guild_team_roster SET
			unit_id = @toon_id,
            rarity_min = CASE @toon_rarity_min WHEN '' THEN NULL ELSE @toon_rarity_min END,
            gear_min = @toon_gear_min,
            rarity_reco = CASE @toon_rarity_reco WHEN '' THEN NULL ELSE @toon_rarity_reco END,
            gear_reco = @toon_gear_reco,
            speed = CASE @toon_speed WHEN '' THEN NULL ELSE @toon_speed END,
            capaLevel = CASE @toon_capaLevel WHEN '' THEN NULL ELSE @toon_capaLevel END,
            modLevel = CASE @toon_modLevel WHEN '' THEN NULL ELSE @toon_modLevel END,
            pg_min = CASE @toon_pg_min WHEN '' THEN NULL ELSE @toon_pg_min END,
            zetaList = @toon_zetas
		WHERE id = @roster_id;

		CALL update_guild_team_zetas(@roster_id, @toon_zetas);
        
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET toons_txt = INSERT(toons_txt,1,@next_toon_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_guild_teams`(
    IN guild_teams_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_guild_teams');
	#INSERT INTO debug(txt) VALUES(CONCAT('guild_teams_txt=', guild_teams_txt));

	SELECT CURRENT_TIMESTAMP INTO @currentUpdateTS;
    
	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(guild_teams_txt)) = 0 OR guild_teams_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_team = SUBSTRING_INDEX(guild_teams_txt,'\\',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_guild_teams @next_team=', @next_team));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_team_len = CHAR_LENGTH(@next_team);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @team_name = SUBSTRING_INDEX(@next_team,'/',1);
        
		SET @before_subteams_txt = SUBSTRING_INDEX(@next_team,'/',1);
		SET @pos_subteams_txt = CHAR_LENGTH(@before_subteams_txt);
		SET @subteams_txt = INSERT(@next_team,1,@pos_subteams_txt + 1,'');

        -- insert the extracted value into the target table
		IF NOT EXISTS (SELECT * FROM guild_teams WHERE guild_teams.name = @team_name) THEN
			INSERT INTO guild_teams(name) VALUES(@team_name);
		END IF;
        UPDATE guild_teams SET
			lastUpdated = @currentUpdateTS
		WHERE guild_teams.name = @team_name;
        
		SET @team_md5 = (SELECT md5 FROM guild_teams WHERE guild_teams.name = @team_name);
		SET @new_md5 = MD5(@subteams_txt);
        IF NOT @team_md5 = @new_md5 THEN
			SET @team_id = (SELECT id FROM guild_teams WHERE guild_teams.name = @team_name);
			CALL update_guild_subteams(@team_id, @subteams_txt);
            
			UPDATE guild_teams SET
				md5 = MD5(@subteams_txt)
			WHERE guild_teams.id = @team_id;
		END IF;
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET guild_teams_txt = INSERT(guild_teams_txt,1,@next_team_len + 1,'');
	END LOOP;
    
    # DELETE teams that were not part of the input list
    DELETE FROM guild_team_roster WHERE subteam_id IN (
		SELECT id FROM guild_subteams WHERE team_id IN (
			SELECT id FROM guild_teams WHERE lastUpdated < @currentUpdateTS
		)
	);
    DELETE FROM guild_subteams WHERE team_id IN (
		SELECT id FROM guild_teams WHERE lastUpdated < @currentUpdateTS
	);
    DELETE FROM guild_teams WHERE lastUpdated < @currentUpdateTS;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_guild_team_zetas`(
    IN p_roster_id INT,
    IN zetas_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_guild_team_zetas');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_roster_id=', p_roster_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('zetas_txt=', zetas_txt));

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(zetas_txt)) = 0 OR zetas_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_zeta = SUBSTRING_INDEX(zetas_txt,',',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_subteam_toons @next_zeta=', @next_zeta));
        
		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_zeta_len = CHAR_LENGTH(@next_zeta);
        
        -- insert the extracted value into the target table
		INSERT INTO guild_team_roster_zetas(roster_id, name) VALUES(p_roster_id, @next_zeta);
        
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET zetas_txt = INSERT(zetas_txt,1,@next_zeta_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_mods`(
	IN p_roster_id INT,
    IN mod_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_mods');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_roster_id=', p_roster_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('mod_definition_txt=', mod_definition_txt));

	#DELETE FROM mod_stats WHERE mod_id IN(SELECT id FROM mods WHERE roster_id = p_roster_id);
	#DELETE FROM mods WHERE roster_id = p_roster_id;
	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(mod_definition_txt)) = 0 OR mod_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_mod = SUBSTRING_INDEX(mod_definition_txt,'|',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_mods @next_mod=', @next_mod));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_mod_len = CHAR_LENGTH(@next_mod);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @mod_level = SUBSTRING_INDEX(@next_mod,',',1);
		SET @mod_pips = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',2),',',-1);
		SET @mod_primaryStat_unitStat = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',3),',',-1);
		SET @mod_primaryStat_value = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',4),',',-1);
		SET @mod_secondaryStat1_unitStat = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',5),',',-1);
		SET @mod_secondaryStat1_value = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',6),',',-1);
		SET @mod_secondaryStat2_unitStat = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',7),',',-1);
		SET @mod_secondaryStat2_value = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',8),',',-1);
		SET @mod_secondaryStat3_unitStat = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',9),',',-1);
		SET @mod_secondaryStat3_value = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',10),',',-1);
		SET @mod_secondaryStat4_unitStat = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',11),',',-1);
		SET @mod_secondaryStat4_value = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',12),',',-1);
		SET @mod_set = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',13),',',-1);
		SET @mod_slot = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',14),',',-1);
		SET @mod_tier = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_mod,',',15),',',-1);

		-- insert the extracted value into the target table
		INSERT INTO mods (roster_id) VALUES (p_roster_id);
        SET @mod_id = LAST_INSERT_ID();
		UPDATE mods SET
			level = @mod_level,
            pips = @mod_pips,
            mod_set = @mod_set,
            slot = @mod_slot,
            tier = @mod_tier
            WHERE id = @mod_id;
            
		# Refresh equipment list
		IF NOT (@mod_primaryStat_unitStat = 0) THEN
			INSERT INTO mod_stats(mod_id,isPrimary,unitStat,value) VALUES(@mod_id,TRUE,@mod_primaryStat_unitStat,@mod_primaryStat_value);
		END IF;
		IF NOT (@mod_secondaryStat1_unitStat = 0) THEN
			INSERT INTO mod_stats(mod_id,isPrimary,unitStat,value) VALUES(@mod_id,FALSE,@mod_secondaryStat1_unitStat,@mod_secondaryStat1_value);
		END IF;
		IF NOT (@mod_secondaryStat2_unitStat = 0) THEN
			INSERT INTO mod_stats(mod_id,isPrimary,unitStat,value) VALUES(@mod_id,FALSE,@mod_secondaryStat2_unitStat,@mod_secondaryStat2_value);
		END IF;
		IF NOT (@mod_secondaryStat3_unitStat = 0) THEN
			INSERT INTO mod_stats(mod_id,isPrimary,unitStat,value) VALUES(@mod_id,FALSE,@mod_secondaryStat3_unitStat,@mod_secondaryStat3_value);
		END IF;
		IF NOT (@mod_secondaryStat4_unitStat = 0) THEN
			INSERT INTO mod_stats(mod_id,isPrimary,unitStat,value) VALUES(@mod_id,FALSE,@mod_secondaryStat4_unitStat,@mod_secondaryStat4_value);
		END IF;
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET mod_definition_txt = INSERT(mod_definition_txt,1,@next_mod_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_player`(
	IN p_allyCode INT,
    IN p_guildName VARCHAR(255) CHARSET utf8,
    IN p_player_id VARCHAR(30),
    IN p_lastActivity DATETIME,
    IN p_level int,
    IN p_name VARCHAR(255) CHARSET utf8,
    IN p_arena_char_rank INT,
    IN p_arena_ship_rank INT,
    IN p_char_gp INT,
    IN p_ship_gp INT,
    IN p_poUTCOffsetMinutes INT,
    IN roster_definition_txt MEDIUMTEXT
    )
BEGIN
	SET CHARACTER SET utf8;
	SET character_set_results=utf8;
	SET character_set_client=utf8;
	SET character_set_connection=utf8;
    
	#INSERT INTO debug(txt) VALUES('START update_player');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_allyCode=', p_allyCode));
	#INSERT INTO debug(txt) VALUES(CONCAT('p_name=', p_name));
	#INSERT INTO debug(txt) VALUES(CONCAT('p_level=', p_level));

	IF NOT EXISTS (SELECT * FROM players WHERE allyCode = p_allyCode) THEN
		INSERT INTO players(allyCode) VALUES(p_allyCode);
    END IF;
	SET @p_player_id = (SELECT id FROM players WHERE allyCode = p_allyCode);
	UPDATE players SET
		guildName = p_guildName,
		player_id = p_player_id,
		lastActivity = p_lastActivity,
		level = p_level,
		name = p_name,
		arena_char_rank = p_arena_char_rank,
		arena_ship_rank = p_arena_ship_rank,
		char_gp = p_char_gp,
		ship_gp = p_ship_gp,
		poUTCOffsetMinutes = p_poUTCOffsetMinutes,
		lastUpdated = CURRENT_TIMESTAMP
		WHERE allyCode = p_allyCode;
	
	SET @player_md5 = (SELECT md5 FROM players WHERE players.allyCode = p_allyCode);
	SET @new_md5 = MD5(roster_definition_txt);
	#INSERT INTO debug(txt) VALUES(CONCAT('@player_md5=', @player_md5));
	#INSERT INTO debug(txt) VALUES(CONCAT('@new_md5=', @new_md5));
	IF NOT @player_md5 = @new_md5 THEN
		CALL update_roster(@p_player_id, roster_definition_txt);

		UPDATE players SET
			md5 = MD5(roster_definition_txt)
		WHERE players.id = @p_player_id;
	#ELSE INSERT INTO debug(txt) VALUES('Identical MD5 > no change');
	END IF;
	
	# update the gp_history table
    IF p_guildName = 'Kangoo Legends' THEN
		SET @delta_TS_last_history = (SELECT TIMESTAMPDIFF(SECOND,MAX(date),CURRENT_TIMESTAMP) FROM gp_history WHERE player_id = @p_player_id);
		IF (ISNULL(@delta_TS_last_history) OR (@delta_TS_last_history > 24*3600)) THEN
			# the history is saved every 24h only
			INSERT INTO gp_history(player_id, char_gp, ship_gp, arena_char_rank, arena_ship_rank)
				VALUES(@p_player_id, p_char_gp, p_ship_gp, p_arena_char_rank, p_arena_ship_rank);
		#ELSE INSERT INTO debug(txt) VALUES(CONCAT('@delta_TS_last_history=', @delta_TS_last_history));
		END IF;
	END IF;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_roster`(
	IN p_player_id INT,
    IN roster_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_roster');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_player_id=', p_player_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('roster_definition_txt=', roster_definition_txt));

	# Clean mods and equipment and skills as they will be created again
	DELETE FROM mod_stats WHERE mod_id IN (
		SELECT mods.id FROM mods
		JOIN roster ON roster.id = mods.roster_id
		WHERE roster.player_id = p_player_id);
	DELETE FROM mods WHERE roster_id IN (
		SELECT roster.id FROM roster
		WHERE roster.player_id = p_player_id);
	DELETE FROM roster_eqpt WHERE roster_id IN (
		SELECT roster.id FROM roster
		WHERE roster.player_id = p_player_id);
	DELETE FROM roster_skills WHERE roster_id IN (
		SELECT roster.id FROM roster
		WHERE roster.player_id = p_player_id);

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(roster_definition_txt)) = 0 OR roster_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_roster = SUBSTRING_INDEX(roster_definition_txt,'\\',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_roster @next_roster=', @next_roster));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_roster_len = CHAR_LENGTH(@next_roster);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @base_definition_txt = SUBSTRING_INDEX(@next_roster,'/',1);
		SET @p_combatType = SUBSTRING_INDEX(@base_definition_txt,',',1);
		SET @p_defId = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',2),',',-1);
		SET @p_gear = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',3),',',-1);
		SET @p_gp = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',4),',',-1);
		SET @p_level = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',5),',',-1);
		SET @p_nameKey = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',6),',',-1);
		SET @p_rarity = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',7),',',-1);
		SET @p_relic_currentTier = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',8),',',-1);
		SET @p_equipped1 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',9),',',-1);
		SET @p_equipped2 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',10),',',-1);
		SET @p_equipped3 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',11),',',-1);
		SET @p_equipped4 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',12),',',-1);
		SET @p_equipped5 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',13),',',-1);
		SET @p_equipped6 = SUBSTRING_INDEX(SUBSTRING_INDEX(@base_definition_txt,',',14),',',-1);
        
		SET @mod_definition_txt = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_roster,'/',2),'/',-1);
		SET @capa_definition_txt = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_roster,'/',3),'/',-1);
		SET @stat_definition_txt = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_roster,'/',4),'/',-1);

		CALL update_roster_element(
			p_player_id,
			@p_combatType,
			@p_defId,
			@p_gear,
			@p_gp,
			@p_level,
			@p_nameKey,
			@p_rarity,
			@p_relic_currentTier,
			@p_equipped1,
			@p_equipped2,
			@p_equipped3,
			@p_equipped4,
			@p_equipped5,
			@p_equipped6,
			@mod_definition_txt,
			@capa_definition_txt,
			@stat_definition_txt);
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET roster_definition_txt = INSERT(roster_definition_txt,1,@next_roster_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_roster_element`(
	IN p_player_id INT,
	IN p_combatType INT,
    IN p_defId VARCHAR(255),
    IN p_gear INT,
    IN p_gp INT,
    IN p_level INT,
    IN p_nameKey VARCHAR(255),
    IN p_rarity INT,
    IN p_relic_currentTier INT,
    IN p_equipped1 VARCHAR(255),
    IN p_equipped2 VARCHAR(255),
    IN p_equipped3 VARCHAR(255),
    IN p_equipped4 VARCHAR(255),
    IN p_equipped5 VARCHAR(255),
    IN p_equipped6 VARCHAR(255),
    IN mod_definition_txt MEDIUMTEXT,
    IN capa_definition_txt MEDIUMTEXT,
    IN stat_definition_txt MEDIUMTEXT
    )
BEGIN
    #INSERT INTO debug(txt) VALUES('START update_roster_element');
    #INSERT INTO debug(txt) VALUES(CONCAT('p_player_id=', p_player_id));
    #INSERT INTO debug(txt) VALUES(CONCAT('p_defId=', p_defId));
    #INSERT INTO debug(txt) VALUES(CONCAT('mod_definition_txt=', mod_definition_txt));
    #INSERT INTO debug(txt) VALUES(CONCAT('capa_definition_txt=', capa_definition_txt));
    #INSERT INTO debug(txt) VALUES(CONCAT('stat_definition_txt=', stat_definition_txt));

	IF NOT EXISTS (SELECT * FROM roster WHERE player_id = p_player_id AND defId = p_defId) THEN
		INSERT INTO roster(player_id,defId) VALUES(p_player_id,p_defId);
    END IF;
    UPDATE roster SET
		combatType = p_combatType,
        gear = p_gear,
        gp = p_gp,
        level = p_level,
        nameKey = p_nameKey,
        rarity = p_rarity,
        relic_currentTier = p_relic_currentTier
        WHERE player_id = p_player_id AND defId = p_defId;

	SET @roster_id = (SELECT id FROM roster WHERE player_id = p_player_id AND defId = p_defId);
    CALL update_mods(@roster_id, mod_definition_txt);
    CALL update_roster_skills(@roster_id, capa_definition_txt);
    CALL update_roster_stats(@roster_id, stat_definition_txt);
    
    # Refresh equipment list
    #DELETE FROM roster_eqpt WHERE roster_id = @roster_id;
	IF NOT (p_equipped1 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped1);
    END IF;
	IF NOT (p_equipped2 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped2);
    END IF;
	IF NOT (p_equipped3 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped3);
    END IF;
	IF NOT (p_equipped4 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped4);
    END IF;
	IF NOT (p_equipped5 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped5);
    END IF;
	IF NOT (p_equipped6 = '') THEN
		INSERT INTO roster_eqpt(roster_id,equipment_id) VALUES(@roster_id,p_equipped6);
    END IF;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_roster_skills`(
	IN p_roster_id INT,
    IN capa_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_roster_skills');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_roster_id=', p_roster_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('capa_definition_txt=', capa_definition_txt));

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(capa_definition_txt)) = 0 OR capa_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_skill = SUBSTRING_INDEX(capa_definition_txt,'|',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_roster_skills @next_skill=', @next_skill));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_skill_len = CHAR_LENGTH(@next_skill);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @skill_name = SUBSTRING_INDEX(@next_skill,',',1);
		SET @skill_level = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_skill,',',2),',',-1);
		SET @skill_isZeta = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_skill,',',3),',',-1);

		-- insert the extracted value into the target table
		INSERT INTO roster_skills (roster_id) VALUES (p_roster_id);
        SET @skill_id = LAST_INSERT_ID();
		UPDATE roster_skills SET
			name = @skill_name,
            level = @skill_level,
            isZeta = @skill_isZeta
            WHERE id = @skill_id;
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET capa_definition_txt = INSERT(capa_definition_txt,1,@next_skill_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_roster_stats`(
	IN p_roster_id INT,
    IN stat_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_roster_stats');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_roster_id=', p_roster_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('stat_definition_txt=', stat_definition_txt));

	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(stat_definition_txt)) = 0 OR stat_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_stat = SUBSTRING_INDEX(stat_definition_txt,'|',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_roster_skills @next_stat=', @next_stat));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_stat_len = CHAR_LENGTH(@next_stat);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @stat_unitStatId = SUBSTRING_INDEX(@next_stat,',',1);
		SET @stat_unscaledDecimalValue = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',2),',',-1);
		SET @stat_type = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',3),',',-1);

		-- insert the extracted value into the target table
		INSERT INTO roster_stats (roster_id) VALUES (p_roster_id);
        SET @stat_id = LAST_INSERT_ID();
		UPDATE roster_stats SET
			unitStatId = @stat_unitStatId,
            unscaledDecimalValue = @stat_unscaledDecimalValue,
            type = @stat_type
            WHERE id = @stat_id;
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET stat_definition_txt = INSERT(stat_definition_txt,1,@next_stat_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_tiers`(
	IN p_unit_id INT,
    IN tier_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_tiers');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_unit_id=', p_unit_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('tier_definition_txt=', tier_definition_txt));
    
	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(tier_definition_txt)) = 0 OR tier_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_tiers = SUBSTRING_INDEX(tier_definition_txt,'/',1);
		#INSERT INTO debug(txt) VALUES(CONCAT('LOOP update_tiers @next_tiers=', @next_tiers));

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_tiers_len = CHAR_LENGTH(@next_tiers);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @p_equipmentSet1 = SUBSTRING_INDEX(@next_tiers,',',1);
		SET @p_equipmentSet2 = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',2),',',-1);
		SET @p_equipmentSet3 = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',3),',',-1);
		SET @p_equipmentSet4 = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',4),',',-1);
		SET @p_equipmentSet5 = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',5),',',-1);
		SET @p_equipmentSet6 = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',6),',',-1);
		SET @p_tier = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_tiers,',',7),',',-1);

		SET @before_stat_definition = SUBSTRING_INDEX(@next_tiers,',',7);
		SET @pos_stat_definition = CHAR_LENGTH(@before_stat_definition);
		SET @stat_definition_txt = INSERT(@next_tiers,1,@pos_stat_definition + 1,'');

		CALL update_tier_element(
			p_unit_id,
			@p_equipmentSet1,
			@p_equipmentSet2,
			@p_equipmentSet3,
			@p_equipmentSet4,
			@p_equipmentSet5,
			@p_equipmentSet6,
			@p_tier,
			@stat_definition_txt);
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET tier_definition_txt = INSERT(tier_definition_txt,1,@next_tiers_len + 1,'');
	END LOOP;
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_tier_element`(
	IN p_unit_id INT,
	IN p_equipmentSet1 VARCHAR(255),
	IN p_equipmentSet2 VARCHAR(255),
	IN p_equipmentSet3 VARCHAR(255),
	IN p_equipmentSet4 VARCHAR(255),
	IN p_equipmentSet5 VARCHAR(255),
	IN p_equipmentSet6 VARCHAR(255),
	IN p_tier INT,
    IN stat_definition_txt MEDIUMTEXT
    )
BEGIN
    #INSERT INTO debug(txt) VALUES('START update_tier_element');
    #INSERT INTO debug(txt) VALUES(CONCAT('p_unit_id=', p_unit_id));
    #INSERT INTO debug(txt) VALUES(CONCAT('p_tier=', p_tier));
    #INSERT INTO debug(txt) VALUES(CONCAT('stat_definition_txt=', stat_definition_txt));

	IF NOT EXISTS (SELECT * FROM unit_tiers WHERE unit_id = p_unit_id AND tier = p_tier) THEN
		INSERT INTO unit_tiers(unit_id,tier) VALUES(p_unit_id,p_tier);
    END IF;
    UPDATE unit_tiers SET
		equipmentSet1 = p_equipmentSet1,
		equipmentSet2 = p_equipmentSet2,
		equipmentSet3 = p_equipmentSet3,
		equipmentSet4 = p_equipmentSet4,
		equipmentSet5 = p_equipmentSet5,
		equipmentSet6 = p_equipmentSet6
        WHERE unit_id = p_unit_id AND tier = p_tier;

	SET @unit_tier_id = (SELECT id FROM unit_tiers WHERE unit_id = p_unit_id AND tier = p_tier);
    CALL update_unit_stats(@unit_tier_id, stat_definition_txt);
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_unit`(
	p_baseId VARCHAR(255),
	p_combatType INT,
	p_descKey TEXT,
	p_forceAlignment INT,
	p_unit_id VARCHAR(255),
	p_nameKey VARCHAR(255),
    tier_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_unit');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_unit_id=', p_unit_id));

	IF NOT EXISTS (SELECT * FROM units WHERE unit_id = p_unit_id) THEN
		INSERT INTO units(unit_id) VALUES(p_unit_id);
    END IF;
    UPDATE units SET
		baseId = p_baseId,
		combatType = p_combatType,
		descKey = p_descKey,
		forceAlignment = p_forceAlignment,
		unit_id = p_unit_id,
		nameKey = p_nameKey
        WHERE unit_id = p_unit_id;
	
    SET @p_current_id = (SELECT id FROM units WHERE unit_id = p_unit_id);
    CALL update_tiers(@p_current_id, tier_definition_txt);
    
END
CREATE DEFINER=`freedbtech_guionensai`@`%` PROCEDURE `update_unit_stats`(
	IN p_unit_tier_id INT,
    IN stat_definition_txt MEDIUMTEXT
    )
BEGIN
	#INSERT INTO debug(txt) VALUES('START update_unit_stats');
	#INSERT INTO debug(txt) VALUES(CONCAT('p_unit_tier_id=', p_unit_tier_id));
	#INSERT INTO debug(txt) VALUES(CONCAT('stat_definition_txt=', stat_definition_txt));

	DELETE FROM unit_stats WHERE unit_tier_id = p_unit_tier_id;
	iterator:
	LOOP
		-- exit the loop if the list seems empty or was null;
		-- this extra caution is necessary to avoid an endless loop in the proc.
		IF CHAR_LENGTH(TRIM(stat_definition_txt)) = 0 OR stat_definition_txt IS NULL THEN
			LEAVE iterator;
		END IF;

		-- capture the next value from the list
		SET @next_stat = SUBSTRING_INDEX(stat_definition_txt,'|',1);

		-- save the length of the captured value; we will need to remove this
		-- many characters + 1 from the beginning of the string 
		-- before the next iteration
		SET @next_stat_len = CHAR_LENGTH(@next_stat);

		-- trim the value of leading and trailing spaces, in case of sloppy CSV strings
		SET @stat_scalar = SUBSTRING_INDEX(@next_stat,',',1);
		SET @stat_statValueDecimal = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',2),',',-1);
		SET @stat_uiDisplayOverrideValue = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',3),',',-1);
		SET @stat_unitStatId = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',4),',',-1);
		SET @stat_unscaledDecimalValue = SUBSTRING_INDEX(SUBSTRING_INDEX(@next_stat,',',5),',',-1);

		-- insert the extracted value into the target table
		INSERT INTO unit_stats (unit_tier_id) VALUES (p_unit_tier_id);
        SET @stat_id = LAST_INSERT_ID();
		UPDATE unit_stats SET
			scalar = @stat_scalar,
            statValueDecimal = @stat_statValueDecimal,
            uiDisplayOverrideValue = @stat_uiDisplayOverrideValue,
            unitStatId = @stat_unitStatId,
            unscaledDecimalValue = @stat_unscaledDecimalValue
            WHERE id = @stat_id;
            
		-- rewrite the original string using the `INSERT()` string function,
		-- args are original string, start position, how many characters to remove, 
		-- and what to "insert" in their place (in this case, we "insert"
		-- an empty string, which removes _nextlen + 1 characters)
		SET stat_definition_txt = INSERT(stat_definition_txt,1,@next_stat_len + 1,'');
	END LOOP;
END
CREATE TABLE `debug` (
  `txt` mediumtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8
CREATE TABLE `gp_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `player_id` int(11) DEFAULT NULL,
  `char_gp` int(11) DEFAULT NULL,
  `ship_gp` int(11) DEFAULT NULL,
  `arena_char_rank` int(11) DEFAULT NULL,
  `arena_ship_rank` int(11) DEFAULT NULL,
  `date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1040 DEFAULT CHARSET=latin1
CREATE TABLE `guild_subteams` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `team_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `minimum` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=309 DEFAULT CHARSET=latin1
CREATE TABLE `guild_team_progress` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `allyCode` int(11) DEFAULT NULL,
  `team_name` varchar(255) DEFAULT NULL,
  `roster` varchar(255) DEFAULT NULL,
  `rarity_gear_zeta` varchar(255) DEFAULT NULL,
  `progress` float DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=255 DEFAULT CHARSET=latin1
CREATE TABLE `guild_team_roster` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `subteam_id` varchar(255) DEFAULT NULL,
  `unit_id` varchar(255) DEFAULT NULL,
  `rarity_min` int(11) DEFAULT NULL,
  `gear_min` varchar(10) DEFAULT NULL,
  `rarity_reco` int(11) DEFAULT NULL,
  `gear_reco` varchar(10) DEFAULT NULL,
  `speed` int(11) DEFAULT NULL,
  `capaLevel` int(11) DEFAULT NULL,
  `modLevel` int(11) DEFAULT NULL,
  `pg_min` int(11) DEFAULT NULL,
  `zetaList` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1502 DEFAULT CHARSET=latin1
CREATE TABLE `guild_team_roster_zetas` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roster_id` int(11) DEFAULT NULL,
  `name` varchar(2) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=474 DEFAULT CHARSET=latin1
CREATE TABLE `guild_teams` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `lastUpdated` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `md5` varchar(32) DEFAULT 'zz',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=251 DEFAULT CHARSET=latin1
CREATE TABLE `guilds` (
  `name` varchar(255) NOT NULL DEFAULT 'noname',
  `lastUpdated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
CREATE TABLE `mod_stats` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `mod_id` int(11) DEFAULT NULL,
  `isPrimary` tinyint(4) DEFAULT NULL,
  `unitStat` int(11) DEFAULT NULL,
  `value` float DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=47126587 DEFAULT CHARSET=latin1
CREATE TABLE `mods` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roster_id` int(11) DEFAULT NULL,
  `level` int(11) DEFAULT NULL,
  `pips` int(11) DEFAULT NULL,
  `mod_set` int(11) DEFAULT NULL,
  `slot` int(11) DEFAULT NULL,
  `tier` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11061362 DEFAULT CHARSET=latin1
CREATE TABLE `players` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `allyCode` int(11) DEFAULT NULL,
  `guildName` varchar(255) DEFAULT NULL,
  `player_id` varchar(30) CHARACTER SET latin1 DEFAULT NULL,
  `lastActivity` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `level` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `arena_char_rank` int(11) DEFAULT NULL,
  `arena_ship_rank` int(11) DEFAULT NULL,
  `char_gp` int(11) DEFAULT NULL,
  `ship_gp` int(11) DEFAULT NULL,
  `poUTCOffsetMinutes` int(11) DEFAULT NULL,
  `lastUpdated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `md5` varchar(32) CHARACTER SET latin1 DEFAULT 'zz',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=388 DEFAULT CHARSET=utf8
CREATE TABLE `roster` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `player_id` int(11) DEFAULT NULL,
  `combatType` int(11) DEFAULT NULL,
  `defId` varchar(255) DEFAULT NULL,
  `gear` int(11) DEFAULT NULL,
  `gp` int(11) DEFAULT NULL,
  `level` int(11) DEFAULT NULL,
  `nameKey` varchar(255) DEFAULT NULL,
  `rarity` int(11) DEFAULT NULL,
  `relic_currentTier` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=80320 DEFAULT CHARSET=latin1
CREATE TABLE `roster_eqpt` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roster_id` int(11) DEFAULT NULL,
  `equipment_id` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4606145 DEFAULT CHARSET=latin1
CREATE TABLE `roster_skills` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roster_id` int(11) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `level` int(11) DEFAULT NULL,
  `isZeta` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1792731 DEFAULT CHARSET=latin1
CREATE TABLE `roster_stats` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `roster_id` int(11) DEFAULT NULL,
  `unitStatId` int(11) DEFAULT NULL,
  `unscaledDecimalValue` bigint(20) DEFAULT NULL,
  `type` varchar(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=164972 DEFAULT CHARSET=latin1
CREATE TABLE `unit_stats` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `unit_tier_id` int(11) DEFAULT NULL,
  `scalar` int(11) DEFAULT NULL,
  `statValueDecimal` int(11) DEFAULT NULL,
  `uiDisplayOverrideValue` int(11) DEFAULT NULL,
  `unitStatId` int(11) DEFAULT NULL,
  `unscaledDecimalValue` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=97630 DEFAULT CHARSET=latin1
CREATE TABLE `unit_tiers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `unit_id` int(11) DEFAULT NULL,
  `equipmentSet1` varchar(255) DEFAULT NULL,
  `equipmentSet2` varchar(255) DEFAULT NULL,
  `equipmentSet3` varchar(255) DEFAULT NULL,
  `equipmentSet4` varchar(255) DEFAULT NULL,
  `equipmentSet5` varchar(255) DEFAULT NULL,
  `equipmentSet6` varchar(255) DEFAULT NULL,
  `tier` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8364 DEFAULT CHARSET=latin1
CREATE TABLE `units` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `baseId` varchar(255) DEFAULT NULL,
  `combatType` int(11) DEFAULT NULL,
  `descKey` text,
  `forceAlignment` int(11) DEFAULT NULL,
  `unit_id` varchar(255) DEFAULT NULL,
  `nameKey` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1315 DEFAULT CHARSET=latin1
